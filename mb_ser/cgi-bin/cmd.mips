#!/bin/sh

echo "Access-Control-Allow-Origin: *"
echo "Content-type: application/json"
echo ""

source ./cgi_lib
cgi_init

echo "cmd: $cgi_cmd" >&2

if [ "$cgi_cmd" == "get_info" ]; then
    echo "{\"info\": \"$(cat /sys/mb/state)\"}"
    
elif [ "$cgi_cmd" == "rm_upload" ]; then
    rm -rf /root/mb_ser/upload/*
    echo 3 > /sys/mb/ctrl
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "sync" ]; then
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "simulate" ]; then
    echo "$cgi_key" > /sys/mb/ctrl
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_conf" ]; then
    echo "{\"conf\": \"$(cat /root/mb_conf/mb.conf)\"}"
    
elif [ "$cgi_cmd" == "set_conf" ]; then
    echo "$cgi_conf" > /root/mb_conf/mb.conf
    echo 0 > /sys/mb/ctrl
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_app_conf" ]; then
    echo "{\"app_conf\": \"$(cat /root/mb_conf/mb_app.conf)\"}"
    
elif [ "$cgi_cmd" == "set_app_conf" ]; then
    echo "$cgi_app_conf" > /root/mb_conf/mb_app.conf
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "get_wifi" ]; then
    echo "{\"wifi\": \"$(cat /root/mb_conf/wifi.conf)\"}"
    
elif [ "$cgi_cmd" == "set_wifi" ]; then
    echo "$cgi_wifi" > /root/mb_conf/wifi.conf
    sync
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "upgrade" ]; then
    cd ../upload/
    rm -rf mbrush-fw
    tar xf mbrush-fw.tar || { echo '{"status": "err: tar file broken"}'; exit 1; }
    ./mbrush-fw/run.sh &> /root/ota.log || { echo "{\"status\": \"err: $?\"}"; exit 1; }
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "pos_dbg" ]; then
    cd ../upload/
    rm -rf pos_dat
    dd if=/sys/mb/pos_dat of=pos_dat bs=280 count=1000
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "wifi_cali" ]; then
    echo 0 > /sys/class/esp_boot/normode
    echo 1 > /sys/class/esp_boot/atemode
    echo 1 > /sys/class/esp_boot/normode
    sleep 0.8
    wifi_ch=${cgi_val:=7}
    ./eagle_test_ate ate wifiscwout 1 $wifi_ch 0 > /dev/null
    echo '{"status": "ok"}'
    
elif [ "$cgi_cmd" == "reboot" ]; then
    sync
    echo '{"status": "ok"}'
    nohup sh -c "sleep 5; reboot" > /dev/null &
    
elif [ "$cgi_cmd" == "eval" ]; then
    cd /root
    echo "eval: $cgi_val"
    ret="$(eval "$cgi_val" 2>&1)"
    echo "ret: $?"
    echo "----------------"
    echo "$ret"

else
    echo '{"status": "err: unknown cmd"}'
fi

